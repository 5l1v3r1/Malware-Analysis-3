# This script can be used for malware samples that used Base64+RC4.
# python3 rc4_decrypt.py -m 0 -k wfgnzwaunvvy -c 46f9b0b2a143b11129cb93cec218278220771c663a222112
# python3 rc4_decrypt.py -m 1 -c wfgnzwaunvvyNDZmOWIwYjJhMTQzYjExMTI5Y2I5M2NlYzIxODI3ODIyMDc3MWM2NjNhMjIyMTEy
# python3 rc4_decrypt.py -m 3 -f Java_Strings.txt
# Real Code https://gist.github.com/nurpabuccu/ac3fe35720d13890c0cc5317acf12a82

import argparse,re,base64,codecs

def KSA(key):
    S = list(range(256))
    j = 0
    for i in range(256):
        j = (j + S[i] + key[i % len(key)]) % 256
        S[i], S[j] = S[j], S[i]  # swap values
    return S

def PRGA(S):
    i = 0
    j = 0
    while True:
        i = (i + 1) % 256
        j = (j + S[i]) % 256

        S[i], S[j] = S[j], S[i]
        K = S[(S[i] + S[j]) % 256]
        yield K

def encrypt_logic(key, text):
    key = [ord(c) for c in key]
    keystream = PRGA(KSA(key))

    res = []
    for c in text:
        val = ("%02x" % (c ^ next(keystream)))  # XOR and taking hex
        res.append(val)
    return ''.join(res)

def encrypt(key, plaintext):
    plaintext = [ord(c) for c in plaintext]
    return encrypt_logic(key, plaintext)

def decrypt(key, ciphertext):
    ciphertext = codecs.decode(ciphertext, 'hex_codec')
    res = encrypt_logic(key, ciphertext)
    return codecs.decode(res, 'hex_codec').decode('utf-8')

Pareser = argparse.ArgumentParser(description="RC4 Decrypter")
Pareser.add_argument("-m","--mode",dest="Mode",type=int,required=True,help="Decryption Mode (0 = Key + Crypted / 1 = Crypted / 2 = Java Strings File")
Pareser.add_argument("-k","--key",dest="Key",type=str,help="Decryption Key")
Pareser.add_argument("-c","--crypted",dest="Crypted",type=str,help="Crypted Data")
Pareser.add_argument("-f","--file",dest="File",type=str,help="Java String File")
Args = Pareser.parse_args()
if __name__ == "__main__":
    if (Args.Mode == 0):
        print(decrypt(Args.Key,Args.Crypted))
    elif (Args.Mode == 1):
        Key = str(Args.Crypted[0:12])
        DecodedData = base64.b64decode(Args.Crypted[12::])
        print(decrypt(Key,DecodedData))
    elif (Args.Mode == 2):
        try:
            File = open(Args.File,"r")
            for Data in File:
                Data = Data.strip()
                try:
                    Data = re.search('"(.*?)"',Data)[0].strip('"')
                    Key = str(Data[0:12])
                    DecodedData = base64.b64decode(Data[12::])
                    print(Data,"=>",decrypt(Key,DecodedData))
                except:
                    pass
        except:
            print("File not found !")
    else:
        print("""Decryption Modes {
    -m 0 -k wfgnzwaunvvy -c 46f9b0b2a143b11129cb93cec218278220771c663a222112
    -m 1 -c wfgnzwaunvvyNDZmOWIwYjJhMTQzYjExMTI5Y2I5M2NlYzIxODI3ODIyMDc3MWM2NjNhMjIyMTEy
    -m 2 -f Java_Strings.txt 
}""")
